apiVersion: v1
kind: Template
metadata:
  name: drupal-template
  annotations:
    description: "Description"
    iconClass: "icon-drupal"
    tags: "drupal"
objects:
- kind: Secret
  apiVersion: v1
  metadata:
    name: mysql-pass-${APP_NAME}
  data:
    password: cm9vdA==
  type: Opaque

# Drupal builder Image openshift generated
- kind: ImageStream
  apiVersion: v1  
  metadata:
    generation: 1
    labels:
      app: drupal
    name: drupal-site-builder-base
  spec:
    lookupPolicy:
     local: true

# Drupal site-builder Image openshift generated
- kind: ImageStream
  apiVersion: v1
  metadata:
    generation: 1
    labels:
      app: drupal
    name: drupal-site-builder-s2i
  spec:
    lookupPolicy:
     local: true

 
# Drupal php Image openshift generated
- kind: ImageStream
  apiVersion: v1
  metadata:
    generation: 1
    labels:
      app: php
    name: drupal-php
  spec:
    lookupPolicy:
     local: true

# Drupal nginx Image openshift generated
- kind: ImageStream
  apiVersion: v1
  metadata:
    generation: 1
    labels:
      app: nginx
    name: drupal-nginx
  spec:
    lookupPolicy:
     local: true

# Site Builder Base
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: site-builder
    name: drupal-site-builder-base
  spec:
    completionDeadlineSeconds: 1200
    successfulBuildsHistoryLimit: 2
    failedBuildsHistoryLimit: 2    
    output:
      to:
        kind: ImageStreamTag
        name: drupal-site-builder-base:drupal-9.0.7
    postCommit: {}
    resources:
      limits:
        cpu: '1'
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 640Mi
    runPolicy: Serial
    source:
      git: 
        uri: "https://gitlab.cern.ch/drupal/paas/drupal-runtime.git"
        ref: "s2i"
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile        
        buildArgs:
          - name: "PHP_BASE_VERSION"
            value: "7.3.23-fpm-alpine3.12"
        env:
          - name: "DRUPAL_VERSION"
            value: "drupal-9.0.7"
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChange: {}

# Site Builder
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: drupal
    name: drupal-site-builder-s2i
  spec:
    completionDeadlineSeconds: 1200
    successfulBuildsHistoryLimit: 2
    failedBuildsHistoryLimit: 2    
    output:
      to:
        kind: ImageStreamTag
        name: drupal-site-builder-s2i:latest
    postCommit: {}
    resources:
      limits:
        cpu: '1'
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: https://gitlab.cern.ch/rvineetr/test-ravineet-d9-containers-buildconfig.git
      type: Git
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: drupal-site-builder-base:drupal-9.0.7
        forcePull: true
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChange: {}

# PHP Builder
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: php
    name: drupal-php
  spec:
    completionDeadlineSeconds: 1200
    successfulBuildsHistoryLimit: 2
    failedBuildsHistoryLimit: 2    
    output:
      to:
        kind: ImageStreamTag
        name: drupal-php:latest
    postCommit: {}
    resources:
      limits:
        cpu: '1'
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 640Mi
    runPolicy: Serial
    source:
      git: 
        uri: "https://gitlab.cern.ch/drupal/paas/drupal-runtime.git"
        ref: "s2i"
      contextDir: "images/php-fpm"
      images:
      - from:
          kind: "ImageStreamTag"
          name: "drupal-site-builder-s2i:latest"
        paths:
        - destinationDir: "./images/php-fpm/drupal-files/"
          sourcePath: "/app/"
    strategy:
      dockerStrategy:
        # dockerfilePath: images/php-fpm/Dockerfile        
        buildArgs:
          - name: "PHP_BASE_VERSION"
            value: "latest"
        env:
          - name: "DRUPAL_SOURCE_DIR"
            value: "drupal-files"
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChange: {}
    - type: ImageChange
      imageChange:
        from:
          kind: "ImageStreamTag"
          name: "drupal-site-builder-s2i:latest"

# Nginx Builder
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: nginx
    name: drupal-nginx
  spec:
    completionDeadlineSeconds: 1200
    successfulBuildsHistoryLimit: 2
    failedBuildsHistoryLimit: 2    
    output:
      to:
        kind: ImageStreamTag
        name: drupal-nginx:latest
    postCommit: {}
    resources:
      limits:
        cpu: '1'
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 640Mi
    runPolicy: Serial
    source:
      git: 
        uri: "https://gitlab.cern.ch/drupal/paas/drupal-runtime.git"
        ref: "s2i"
      contextDir: "images/nginx"
      images:
      - from:
          kind: "ImageStreamTag"
          name: "drupal-site-builder-s2i:latest"
        paths:
        - destinationDir: "./images/nginx/drupal-files/"
          sourcePath: "/app/"
    strategy:
      dockerStrategy:
        buildArgs:
          - name: "SITE_BUILDER_VERSION"
            value: "latest"
          - name: "NGINX_VERSION"
            value: "1.17.4"
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChange: {}
    - type: ImageChange
      imageChange:
        from:
          kind: "ImageStreamTag"
          name: "drupal-site-builder-s2i:latest"


- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    name: drupal-mysql-${APP_NAME}
  spec:
    triggers:
      - type: ConfigChange
    replicas: 1
    selector:
      app: drupal-mysql-${APP_NAME}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: drupal-mysql-${APP_NAME}
      spec:
        volumes:
          - name: mysql-persistent-storage
            emptyDir: {}
        containers:
          - name: mysql
            env:
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-pass-${APP_NAME}
                    key: password
              - name: MYSQL_DATABASE
                value: drupal
            ports:
              - containerPort: 3306
                protocol: TCP
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: mysql-persistent-storage
                mountPath: /var/lib/mysql
            image: 'mysql:5.7'

- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    name: drupal-nginx-${APP_NAME}
  spec:
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - nginx
        from:
          kind: ImageStreamTag
          name: drupal-nginx:latest
    replicas: 1
    selector:
      app: drupal-nginx-${APP_NAME}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: drupal-nginx-${APP_NAME}
      spec:
        restartPolicy: Always
        initContainers:
          - name: pvc-init
            image: bash
            command: ['bash', '-c', 'mkdir -p $DRUPAL_SHARED_VOLUME/{files,private,modules,themes}']
            env:
              - name: DRUPAL_SHARED_VOLUME
                value: /drupal-data
            volumeMounts:
              - name: drupal-directory-${APP_NAME}
                mountPath: /drupal-data
        containers:
          - name: nginx
            env:
              - name: DRUPAL_SHARED_VOLUME
                value: /drupal-data
              - name: DB_HOST
                value: drupal-mysql-${APP_NAME}
              - name: DB_PORT
                value: '3306'
              - name: DB_NAME
                value: drupal
              - name: DB_USER
                value: root
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-pass-${APP_NAME}
                    key: password
            ports:
              - containerPort: 8080
                protocol: TCP
            imagePullPolicy: Always
            volumeMounts:
              - name: drupal-directory-${APP_NAME}
                mountPath: /drupal-data
            image: drupal-nginx:latest
        volumes:
          - name: drupal-directory-${APP_NAME}
            persistentVolumeClaim:
              claimName: drupal-pv-claim-${APP_NAME}

- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    name: drupal-php-${APP_NAME}
  spec:
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - php
        from:
          kind: ImageStreamTag
          name: drupal-php:latest
    replicas: 1
    selector:
      app: drupal-php-${APP_NAME}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: drupal-php-${APP_NAME}
      spec:
        restartPolicy: Always
        initContainers:
          - name: pvc-init
            image: bash
            command: ['bash', '-c', 'mkdir -p $DRUPAL_SHARED_VOLUME/{files,private,modules,themes}']
            env:
              - name: DRUPAL_SHARED_VOLUME
                value: /drupal-data
            volumeMounts:
              - name: drupal-directory-${APP_NAME}
                mountPath: /drupal-data
        containers:
          - name: php
            env:  
              - name: DRUPAL_SHARED_VOLUME
                value: /drupal-data
              - name: DB_HOST
                value: drupal-mysql-${APP_NAME}
              - name: DB_PORT
                value: '3306'
              - name: DB_NAME
                value: drupal
              - name: DB_USER
                value: root
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-pass-${APP_NAME}
                    key: password
            ports:
              - containerPort: 9000
                protocol: TCP
            imagePullPolicy: Always
            volumeMounts:
              - name: drupal-directory-${APP_NAME}
                mountPath: /drupal-data
            image: >-
              drupal-php:latest
        volumes:
          - name: drupal-directory-${APP_NAME}
            persistentVolumeClaim:
              claimName: drupal-pv-claim-${APP_NAME}

# - kind: Job
#   apiVersion: batch/v1
#   metadata:
#     name: drupal-site-install-job-${APP_NAME}
#   spec:
#     template:
#       metadata:
#         creationTimestamp: null
#       spec:
#         restartPolicy: Never
#         volumes:
#           - name: drupal-directory-${APP_NAME}
#             persistentVolumeClaim:
#               claimName: drupal-pv-claim-${APP_NAME}
#         containers:
#           - name: drush
#             env:  
#               - name: DRUPAL_SHARED_VOLUME
#                 value: /drupal-data
#               - name: DB_HOST
#                 value: drupal-mysql-${APP_NAME}
#               - name: DB_PORT
#                 value: '3306'
#               - name: DB_NAME
#                 value: drupal
#               - name: DB_USER
#                 value: root
#               - name: DB_PASSWORD
#                 valueFrom:
#                   secretKeyRef:
#                     name: mysql-pass-${APP_NAME}
#                     key: password
#             imagePullPolicy: Always
#             volumeMounts:
#               - name: drupal-directory-${APP_NAME}
#                 mountPath: /drupal-data
#             image: gitlab-registry.cern.ch/drupal/paas/drupalsite-operator/drush:drupal-${DRUPAL_VERSION}
            
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: drupal-pv-claim-${APP_NAME}
  spec:
    storageClassName: cephfs-no-backup
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi

- kind: Service
  apiVersion: v1
  metadata:
    name: php-fpm
  spec:
    ports:
      - protocol: TCP
        port: 80
        targetPort: 9000
    selector:
      app: drupal-php-${APP_NAME}

- kind: Service
  apiVersion: v1
  metadata:
    name: drupal-mysql-${APP_NAME}
  spec:
    ports:
      - protocol: TCP
        port: 3306
        targetPort: 3306
    selector:
      app: drupal-mysql-${APP_NAME}
    
- kind: Service
  apiVersion: v1
  metadata:
    name: drupal-nginx-${APP_NAME}
  spec:
    ports:
      - protocol: TCP
        port: 80
        targetPort: 8080
    selector:
      app: drupal-nginx-${APP_NAME}

- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: drupal-${APP_NAME}
    annotations:
      haproxy.router.openshift.io/set-forwarded-headers: replace
  spec:
    host: ${APP_NAME}-drupaltemplate.${CLUSTER_NAME}.cern.ch
    to:
      kind: Service
      name: drupal-nginx-${APP_NAME}
      weight: 100
    port:
      targetPort: 8080
    wildcardPolicy: None

parameters:
- description: Drupal application name
  from: '[A-Z0-9]{8}'
  name: APP_NAME
# - description: Drupal version
#   from: '[0-9]{1}'
#   name: DRUPAL_VERSION
- description: Cluster name
  from: '[0-9]{1}'
  name: CLUSTER_NAME
labels:
  drupal: master
