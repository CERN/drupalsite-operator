variables:
  VERSION: 0.0.1
  # IMAGE_TAG_BASE defines the docker.io namespace and part of the image name for remote images.
  # This variable is used to construct full image tags for bundle and catalog images.
  IMAGE_TAG_BASE: "registry.cern.ch/drupal/paas/drupalsite-operator"
  # Image URL to use all building/pushing image targets
  IMG: "${IMAGE_TAG_BASE}-controller:${VERSION}"
  # Set CATALOG_BASE_IMG to an existing catalog image tag to add $BUNDLE_IMGS to that image.
  CATALOG_BASE_IMG: ${IMAGE_TAG_BASE}-catalog:latest
  BUNDLE_IMG: ${IMAGE_TAG_BASE}-bundle:v${VERSION}
  # Channel naming
  # c.f. https://olm.operatorframework.io/docs/best-practices/channel-naming/#recommended-channel-naming
  BUNDLE_CHANNELS: "--channels='fast,stable'"
  BUNDLE_DEFAULT_CHANNEL: "--default-channel='stable'"
  BUNDLE_METADATA_OPTS: "${BUNDLE_CHANNELS} ${BUNDLE_DEFAULT_CHANNEL}"
  # A comma-separated list of bundle images (e.g. make catalog-build BUNDLE_IMGS=example.com/operator-bundle:v0.1.0,example.com/operator-bundle:v0.2.0).
  # These images MUST exist in a registry and be pull-able.
  BUNDLE_IMGS: ${BUNDLE_IMG}
  # Operator SDK version required.
  OPERATOR_SDK_VERSION: 1.9.0
  GOLANG_VERSION: 1.15.12

stages:
  - build-bundle
  - deploy-bundle-staging
  - deploy-bundle-production

.before_script:
  before_script:
    - mkdir -p ~/.docker/ && echo "${DOCKER_AUTH_CONFIG}" > ~/.docker/config.json
    # Pre-requisites
    - apk add make curl gnupg go gcc bash musl-dev openssl-dev git libc-dev build-base
    - wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
    - wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.33-r0/glibc-2.33-r0.apk
    - apk add glibc-2.33-r0.apk
    # Install operator-sdk
    # https://sdk.operatorframework.io/docs/installation/
    - export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
    - export OS=$(uname | awk '{print tolower($0)}')
    - export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/v${OPERATOR_SDK_VERSION}
    - curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
    - gpg --keyserver keyserver.ubuntu.com --recv-keys 052996E2A20B5C7E
    - curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt
    - curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc
    - gpg -u "Operator SDK (release) <cncf-operator-sdk@cncf.io>" --verify checksums.txt.asc
    - grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -
    - chmod +x operator-sdk_${OS}_${ARCH} && mv operator-sdk_${OS}_${ARCH} /usr/local/bin/operator-sdk
    # Install golang.
    - wget https://dl.google.com/go/go${GOLANG_VERSION}.src.tar.gz
    - tar -xzf go${GOLANG_VERSION}.src.tar.gz -C /usr/local 
    - cd /usr/local/go/src
    - ./make.bash
    - export PATH=$PATH:/usr/local/go/bin
    - apk del go
    - cd $CI_BUILDS_DIR/$CI_PROJECT_PATH

.deploy_bundle:
  extends: .before_script
  tags:
  - docker-privileged
  services:
    # To obtain a Docker daemon, request a Docker-in-Docker service
    - docker:19.03.1-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  image:
      name: docker:19.03.1
  script:
    # Generate controller image and push it.
    - make docker-build docker-push
    # Generate, build and push both bundle manifests and the catalog.
    - make bundle bundle-build bundle-push catalog-build catalog-push

# DEVELOPMENT PURPOSES #
#
# Just use it for development purposes.
Build and Push Bundle (for development purposes):
  environment: dev
  stage: build-bundle
  extends: .before_script
  tags:
  - docker-privileged
  services:
    # To obtain a Docker daemon, request a Docker-in-Docker service
    - docker:19.03.1-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  image:
      name: docker:19.03.1
  script:
    # Generate controller image and push it.
    - make docker-build docker-push
    # Generate, build and push the bundle manifests.
    - make bundle bundle-build bundle-push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'
      when: never

# STAGING #
#
# When pushing to any branch, this will trigger a deployment under the `stable` channel.
# and to the `catalog:staging` tag (staging clusters)
# i.e., changes are automatically deployed to https://drupal-stg.cern.ch
# This process must be triggered manually and it will build/push the controller, the bundle and the catalog.
OLM Deployment (staging):
  environment: staging
  stage: deploy-bundle-staging
  extends: .deploy_bundle
  variables:
    # Set CATALOG_BASE_IMG to an existing catalog image tag to add $BUNDLE_IMGS to that image.
    # Use staging tag for staging clusters
    CATALOG_IMG: ${IMAGE_TAG_BASE}-catalog:staging
    CATALOG_BASE_IMG: ${IMAGE_TAG_BASE}-catalog:staging
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: manual
    - if: '$CI_COMMIT_TAG'
      when: never

  
# PRODUCTION #
#
# When generating a tag (e.g., 0.0.3), this will trigger a deployment under the `stable` channel.
# and to the `catalog:latest` tag (production clusters)
# i.e., changes are automatically deployed to https://drupal.cern.ch
# This process must be triggered manually and it will build/push the controller, the bundle and the catalog.
OLM Deployment (production):
  environment: production
  stage: deploy-bundle-production
  extends: .deploy_bundle
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  variables:
    # Set CATALOG_BASE_IMG to an existing catalog image tag to add $BUNDLE_IMGS to that image.
    # Use latest tag for production clusters
    CATALOG_IMG: ${IMAGE_TAG_BASE}-catalog:latest
    CATALOG_BASE_IMG: ${IMAGE_TAG_BASE}-catalog:latest

